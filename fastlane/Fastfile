default_platform(:ios)

username       = ENV["FASTLANE_USER"]
asc_key_id     = ENV["ASC_KEY_ID"]
asc_issuer_id  = ENV["ASC_ISSUER_ID"]
asc_key_filepath = ENV["ASC_KEY_FILEPATH"]

scheme         = ENV["SCHEME"]
bundle_id      = ENV["BUNDLE_ID"]
app_name       = ENV["APP_NAME"]
export_method  = ENV["EXPORT_METHOD"] || "app-store"  # 默认 app-store

platform :ios do

  before_all do |lane, options|
    UI.header "Step: before_all"
    UI.important "username = #{username}"
    UI.important "asc_key_id = #{asc_key_id}"
    UI.important "asc_issuer_id = #{asc_issuer_id}"
    UI.important "asc_key_content = #{asc_key_filepath}"
    UI.important "bundle_id = #{bundle_id}"
    UI.important "app_name = #{app_name}"
    UI.important "export_method = #{export_method}"

    setup_circle_ci
  end

  ######################################################
  # ✅ 只打包 IPA（不上传）
  ######################################################
  lane :release do
    on_match
    prepare_gym

    gym(
      scheme: scheme,
      configuration: "Release",        # 指定 Release，避免找 Development 证书
      export_method: export_method,    # app-store / ad-hoc / enterprise
      clean: true,
      silent: false,
      output_directory: "./build",
      output_name: "#{app_name}.ipa"
    )

    UI.success("✅ 打包完成！IPA 文件已输出到 ./build/#{app_name}.ipa")
  end

  ######################################################
  # ✅ 签名匹配（只用 App Store profile）
  ######################################################
  lane :on_match do
    app_store_connect_api_key(
      key_id: asc_key_id,
      issuer_id: asc_issuer_id,
      key_filepath: asc_key_filepath,
      in_house: false
    )

    begin
      # ✅ 尝试使用已有 App Store Distribution 证书
      match_result = match(
        git_branch: username,
        username: username,
        type: "appstore",               # 只用 App Store 证书
        app_identifier: [bundle_id],
        readonly: true
      )
      UI.success("✅ 已找到可用 App Store 证书和描述文件")
    rescue => e
      UI.important("⚠️ 没有可用证书，需要生成新的：#{e}")

      match_result = match(
        git_branch: username,
        username: username,
        type: "appstore",
        app_identifier: [bundle_id],
        readonly: false,
        force_for_new_devices: true
      )
      UI.success("✅ 新证书生成成功")
    end

    profiles = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
    UI.important("profiles = #{profiles}")
  end

  ######################################################
  # ✅ 更新签名配置
  ######################################################
  lane :prepare_gym do
    profile_name = lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING][bundle_id]
    unless profile_name
      UI.user_error!("⚠️ 找不到描述文件，请先执行 on_match 成功")
    end

    UI.important("profile_name = #{profile_name}")

    update_code_signing_settings(
      use_automatic_signing: false,
      profile_name: profile_name,
      targets: [scheme],               # 指定 target
      build_configurations: ["Release"],  # ✅ 改成数组
      team_id: ENV["TEAM_ID"]
    )
  end

end
